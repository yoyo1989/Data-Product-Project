plot(fit1)
summary(fit1)
summary(fit3)
with(mtcars, table(am))
g = ggpairs(mtcars, lower = list(continuous = "smooth",params=list(corSize=60)),params = c(method = "loess"), size=0.1)
g
summary(lm(mpg ~ . -1, data = mtcars))
summary(lm(mpg ~ . , data = mtcars))
summary(lm(mpg ~ . -1, data = mtcars))
analysis <- aov(mpg ~ ., data = mtcars)
summary(analysis)
leverage <- hatvalues(fit3)
tail(sort(leverage),3)
influential <- dfbetas(fit3)
tail(sort(influential[,6]),3)
tail(sort(influential),3)
influential <- dfbetas(fit3)
tail(sort(influential),3)
tail(sort(influential[,3]),3)
tail(sort(influential[,1]),3)
tail(sort(influential[,0]),3)
tail(sort(influential[,2]),3)
tail(influential)
tail(leverage)
tail(sort(influential[,4]),3)
tail(sort(influential[,5]),3)
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ factor(am), data = mtcars)
t.test(mpg ~ factor(am)+wt, data = mtcars)
sumCoef <- summary(fit1)$coefficients
sumCoef
sumCoef[1,1]
sumCoef[1, 2]
fit1 <- lm(mpg~factor(am) + wt + cyl+drat-1, data = mtcars)
summary(fit1)
sumCoef <- summary(fit1)$coefficients
sumCoef[1,1]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
?mtcars
summary(mtcars)
head(mtcars)
length(mtcars$mpg)
length(mtcars$mpg[mtcars$am==0])
with(mtcars, table(am))
fit=lm(mpg ~ factor(am), data = mtcars)
summary(fit)
summary(lm(mpg ~ . -1, data = mtcars))
pairs(mtcars)
cor(mtcars)
sort(cor(mtcars)[1,])
sort(cor(mtcars)[1,])
sort(abs(cor(mtcars)[1,]))
tail(sort(abs(cor(mtcars)[1,])))
sort(abs(cor(mtcars)[1,])),-1)
sort(-abs(cor(mtcars)[1,])))
sort(abs(cor(mtcars)[1,])))
```
sort(abs(cor(mtcars)[1,])))
sort(cor(mtcars)[1,])
sort(abs(cor(mtcars)[1,]))
order(abs(cor(mtcars)[1,]))
sort(abs(cor(mtcars)[1,]))
fit1 <- lm(mpg~factor(am) + wt + cyl+drat+qsec, data = mtcars)
fit2 <- lm(mpg~factor(am) + wt + cyl+drat, data = mtcars)
fit3 <- lm(mpg~factor(am) + wt + cyl, data = mtcars)
fit4 <- lm(mpg~factor(am) + wt + hp+vs+drat+qsec, data = mtcars)
fit5 <- lm(mpg~factor(am) + wt + hp+vs+drat, data = mtcars)
fit6 <- lm(mpg~factor(am) + wt + hp+vs, data = mtcars)
fit7 <- lm(mpg~factor(am) + wt + hp, data = mtcars)
anova(fit, fit1, fit2, fit3)
anova(fit, fit3, fit2, fit1)
anova(fit, fit7, fit6, fit5, fit4)
summary(fit3)
summary(fit7)$coef
summary(fit7)
anova(fit, fit0, fit7, fit6, fit5, fit4)
fit0 <- lm(mpg~factor(am) + wt, data = mtcars)
anova(fit, fit0, fit3, fit2, fit1)
anova(fit, fit0, fit7, fit6, fit5, fit4)
fitbest <- lm(mpg~factor(am) + wt + hp + cyl, data = mtcars)
anova(fit, fit0, fit7, fitbest)
anova(fit, fit0, fit3, fitbest)
summary(fit3)
summary(fit7)
leverage <- hatvalues(fit3)
tail(sort(leverage),3)
par(mfrow = c(2,2))
plot(fit3)
leverage <- hatvalues(fit3)
tail(sort(leverage),3)
tail(sort(leverage),5)
influential <- dfbetas(fit3)
tail(sort(influential[,4]),3)
influential
tail(sort(influential[,4]),3)
par(mfrow = c(2,2))
plot(fit7)
leverage <- hatvalues(fit7)
tail(sort(leverage),3)
influential <- dfbetas(fit7)
tail(sort(influential[,1]),3)
tail(sort(influential[,2]),3)
t.test(mpg ~ factor(am), data = mtcars)
fit3r <- lm(mpg~factor(am) + wt + cyl-1, data = mtcars)
sumCoef <- summary(fit3r)$coefficients
sumCoef
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit7r <- lm(mpg~factor(am) + wt + hp, data = mtcars)
sumCoef <- summary(fit7r)$coefficients
sumCoef
fit7r <- lm(mpg~factor(am) + wt + hp-1, data = mtcars)
sumCoef <- summary(fit7r)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit7r$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit7r$df) * sumCoef[2, 2]
analysis <- aov(mpg ~ ., data = mtcars)
summary(analysis)
summary(lm(mpg ~ . -1, data = mtcars))
#g
t.test(mpg ~ factor(am), data = mtcars)
sumCoef <- summary(fit3r)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit3r$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit3r$df) * sumCoef[2, 2]
sumCoef <- summary(fit7r)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit7r$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit7r$df) * sumCoef[2, 2]
fit=lm(mpg ~ factor(am), data = mtcars)
summary(fit)
g = ggpairs(mtcars, lower = list(continuous = "smooth"),params = c(method = "loess"), size=0.1)
g
mtcars$mpg
fitbest <- lm(mpg~factor(am) + wt + hp-1, data = mtcars)
sumCoef <- summary(fitbest)$coefficients
sumCoef
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
fullModel <- lm(mpg ~ ., data=mtcars)
summary(fullModel)
?mtcars
mtcars$vs
step(fullModel)
summary(step(fullModel))
stepModel <- step(fullModel, k=log(nrow(mtcars)))
lm(mpg ~ factor(am) * wt + cyl, mtcars)
summary(lm(mpg ~ factor(am) * wt + cyl, mtcars))
fit7 <- lm(mpg~factor(am) + wt + hp, data = mtcars)
summary(fit7)
fit3 <- lm(mpg~factor(am) + wt + cyl, data = mtcars)
summary(fit3)
library(car)
fit=lm(mpg ~ factor(am), data = mtcars)
fit0 <- lm(mpg~factor(am) + wt, data = mtcars)
fit2 <- lm(mpg~factor(am) + wt + cyl+drat, data = mtcars)
fit3 <- lm(mpg~factor(am) + wt + cyl, data = mtcars)
kable(anova(fit, fit0, fit3, fit2))
#anova(fit, fit0, fit7, fit6, fit5)
kable(anova(fit, fit0, fit3, fit2))
fit1=lm(mpg~factor(am) + cyl, data = mtcars)
summary(fit1)$coef
fit1=lm(mpg~factor(am) + factor(cyl), data = mtcars)
summary(fit1)$coef
fit2=lm(mpg~factor(am) + factor(cyl), data = mtcars)
summary(fit2)$coef
fit=lm(mpg ~ factor(am), data = mtcars)
summary(fit)$coef
fit=lm(mpg ~ ., data = mtcars)
summary(fit)$coef
fit=lm(mpg ~ am, data = mtcars)
summary(fit)$coef
mpg$am=as.factor(mpg$am)
fit=lm(mpg ~ ., data = mtcars)
summary(fit)$coef
fit2 <- lm(mpg~factor(am) + wt + cyl+drat, data = mtcars)
fit3 <- lm(mpg~factor(am) + wt + cyl, data = mtcars)
fit0 <- lm(mpg~factor(am) + wt, data = mtcars)
anova(fit, fit0, fit3, fit2)
anova(fit, fit0)
anova(fit0, fit1)
anova(fit0, fit)
?shuffle
?shuttle
library("MASS")
?shuttle
q1 <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(q1)
exp(q1$coefficients)
Coef <- coef(summary(q1))
coef.odds <- exp(c(Coef[1, 1], Coef[2, 1]))
(odds.ratio <- coef.odds[1] / coef.odds[2])
fit <- glm(use ~ wind, family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind+magn, family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(use ~ wind+as.factor(magn), family='binomial', shuttle)
exp(fit$coeff)
fit <- glm(1－use ~ wind, family='binomial', shuttle)
fit <- glm(1-use ~ wind, family='binomial', shuttle)
q1 <- glm(shuttle$use ~ shuttle$wind,family="binomial")
summary(q1)$coef
q2 <- glm(1-shuttle$use ~ shuttle$wind,family="binomial")
q2 <- glm(1-as.numeric(shuttle$use) ~ shuttle$wind,family="binomial")
q2 <- glm(I(1-shuttle$use) ~ shuttle$wind,family="binomial")
q2 <- glm(1-as.numeric(shuttle$use) ~ shuttle$wind,family="binomial")
shuttle$use
as.factor(shuttle$use)
as.numeric(shuttle2$use=='auto')
as.numeric(shuttle$use=='auto')
q2 <- glm(1-as.numeric(shuttle$use=='auto') ~ shuttle$wind,family="binomial")
summary(q2)$coef
q1 <- glm(as.numeric(shuttle$use=='auto') ~ shuttle$wind,family="binomial")
summary(q1)$coef
glm1 <- glm(InsectSprays$visits ~ gaData$julian,family="poisson")
?InsectSprays
glm1 <- glm(InsectSprays ~ .,family="poisson")
glm1 <- glm(InsectSprays$count ~ .,family="poisson")
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
summary(glm1)$coef
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray-1,family="poisson")
summary(glm1)$coef
exp(2.6741486)/exp(2.7300291)
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray+offset(2),family="poisson")
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,offset=(2),family="poisson")
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,offset=(count+1),family="poisson")
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,offset=(InsectSprays$count+1),family="poisson")
summary(glm1)$coef
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,offset=(InsectSprays$count+1+log(10)),family="poisson")
summary(glm1)$coef
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
summary(glm1)$coef
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,offset=(log(InsectSprays$count+1)+log(10)),family="poisson")
summary(glm1)$coef
glm1 <- glm(InsectSprays$count ~ InsectSprays$spray,offset=(log(InsectSprays$count+1)),family="poisson")
summary(glm1)$coef
exp(-0.066691374)
exp(-2.369276467 )
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
summary(lm(y ~ xMat - 1))$coef
log(10)
-0.066691374-log(10)
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
summary(lm(y~x+offset(z)))$coef
z=z*4
summary(lm(y~x+offset(z)))$coef
z=c(1:10)
summary(lm(y~x+offset(z)))$coef
z
z=z+log(10)
summary(lm(y~x+offset(z)))$coef
library(caret);
install.packages("caret")
library(caret); library(kernlab); data(spam)
library(caret)
install.packages("caret")
library(caret)
library(caret); library(kernlab); data(spam)
library(caret)
install.packages("caret")
library(caret)
install.packages('caret', repos='http://cran.rstudio.com/')
nstall.packages("lme4")
install.packages("lme4")
install.packages("RcppEigen")
install.packages("caret")
install.packages("lme4")
install.packages("lme4",dependencies = c("Depends", "Imports"))
library("devtools")
install_github("lme4",user="lme4")
install.packages("caret")
library(caret)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
library(kernlab)
data(spam)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
install.packages('e1071', dependencies=TRUE)
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit <- train(type ~.,data=training, method="glm")
modelFit$finalModel
set.seed(32323)
folds <- createFolds(y=spam$type,k=10,
list=TRUE,returnTrain=TRUE)
sapply(folds,length)
folds[[1]][1:10]
folds[[2]][1:10]
args(train.default)
set.seed(1235)
modelFit2 <- train(type ~.,data=training, method="glm")
modelFit2
library(ISLR);
install.packages("ISLR")
library(ISLR); library(ggplot2); library(caret); library(gridExtra);
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qq <- qplot(age,wage,colour=education,data=training)
qq +  geom_smooth(method='lm',formula=y~x)
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
p1 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot"))
p1
p2 <- qplot(cutWage,age, data=training,fill=cutWage,
geom=c("boxplot","jitter"))
grid.arrange(p1,p2,ncol=2)
p2
t1 <- table(cutWage,training$jobclass)
t1
prop.table(t1,1)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
mean(training$capitalAve)
sd(training$capitalAve)
trainCapAve <- training$capitalAve
trainCapAveS <- (trainCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
sd(trainCapAveS)
testCapAve <- testing$capitalAve
testCapAveS <- (testCapAve  - mean(trainCapAve))/sd(trainCapAve)
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training[,-58],method=c("center","scale"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
mean(trainCapAveS)
sd(trainCapAveS)
testCapAveS <- predict(preObj,testing[,-58])$capitalAve
mean(testCapAveS)
sd(testCapAveS)
preObj <- preProcess(training[,-58],method=c("BoxCox"))
trainCapAveS <- predict(preObj,training[,-58])$capitalAve
par(mfrow=c(1,2)); hist(trainCapAveS); qqnorm(trainCapAveS)
library(ISLR); library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass,data=training)
head(predict(dummies,newdata=training))
nsv <- nearZeroVar(training,saveMetrics=TRUE)
nsv
head(training)
library(splines)
bsBasis <- bs(training$age,df=3)
bsBasis
lm1 <- lm(wage ~ bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
predict(bsBasis,age=testing$age)
head(bsBasis)
library(splines)
bsBasis <- bs(training$age,df=3)
head(bsBasis)
bsBasis
head(bsBasis)
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
names(spam)[c(34,32)]
names(spam)[c(40,32)]
plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
library(caret);data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
data(Wage)
summary(Wage)
modFit<- train(wage ~ age + jobclass + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
modFit<- train(wage ~ age + I(jobclass) + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(concrete)
hist(training$Superplasticizer, main = "")
hist(log(training$Superplasticizer + 1), main = "")
hist(log(training$Superplasticizer), main = "")
hist(training$Superplasticizer, main = "")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(predictors)
predName <- names(training)
predName
(ILpredictor <- predName[substr(predName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
ProcPCA$numComp
library(shiny)
setwd("~/class/DS_Coursera/9_dataProduct/project_App")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sqrt(4)
sqrt(2*2)
shiny::runApp()
c
c=299792458
c
shiny::runApp()
c=299792458.0
k=90
m=50
c*sqrt(1-(m*c*c/(k+m*c*c))^2)
c
c*c
m*c*c
m*c*c/(k+m*c*c)
k*k+2*k*m*c*c
k*k+2*k*m*c*c)/(k+m*c*c)^2
(k*k+2*k*m*c*c)/(k+m*c*c)^2
c*sqrt((k*k+2*k*m*c*c)/(k+m*c*c)^2)
shiny::runApp()
shiny::runApp()
